{"version":3,"file":"graph-hops.js","sources":["../node_modules/floyd-warshall/src/index.js","../index.js"],"sourcesContent":["'use strict'\n\n/** Calculator for finding widest and/or shortest paths in a graph using the Floyed-Warshall algorithm. */\nclass FloydWarshall {\n\n  /**\n   * Create a Floyd-Warshall calculator for a specific adjacency matrix.\n   * @param {number[][]} adjacencyMatrix - A square matrix representing a graph with weighted edges.\n   */\n  constructor (adjacencyMatrix) {\n    this.adjacencyMatrix = adjacencyMatrix\n  }\n\n  /**\n   * Calculates the widest distance from one node to the other.\n   * @return {number[][]} - Matrix with distances from a node to the other\n   */\n  get widestPaths () {\n    let distMatrix = this._initializeDistanceMatrix(0)\n    for (let k = 0; k < this.order; ++k) {\n      for (let i = 0; i < this.order; ++i) {\n        if (i === k) { continue }\n        for (let j = 0; j < this.order; ++j) {\n          if (j === i || j === k) { continue }\n          const direct = distMatrix[i][j]\n          const detour = Math.min(distMatrix[i][k], distMatrix[k][j])\n          if (detour > direct) {\n            distMatrix[i][j] = detour\n          }\n        }\n      }\n    }\n    return distMatrix\n  }\n\n  /**\n   * Calculates the shortest paths of the weighted graph.\n   * (The output will not be accurate if the graph has a negative cycle.)\n   * @return {number[][]} - Matrix with distances from a node to the other\n   */\n  get shortestPaths () {\n    let distMatrix = this._initializeDistanceMatrix(Infinity)\n\n    for (let k = 0; k < this.order; ++k) {\n      for (let i = 0; i < this.order; ++i) {\n        for (let j = 0; j < this.order; ++j) {\n          let dist = distMatrix[i][k] + distMatrix[k][j]\n          if (distMatrix[i][j] > dist) {\n            distMatrix[i][j] = dist\n          }\n        }\n      }\n    }\n\n    for (let i = 0; i < this.order; ++i) {\n      for (let j = 0; j < this.order; ++j) {\n        if (distMatrix[i][j] === Infinity) {\n          distMatrix[i][j] = -1\n        }\n      }\n    }\n\n    return distMatrix\n  }\n\n  /**\n   * Get the order of the adjacency matrix (and of the output distance matrices.)\n   * @return {integer} The order of the adjacency matrix.\n   */\n  get order () {\n    return this.adjacencyMatrix.length\n  }\n\n  /**\n   * @private\n   */\n  _initializeDistanceMatrix (blankFiller) {\n    let distMatrix = []\n    for (let i = 0; i < this.order; ++i) {\n      distMatrix[i] = []\n      for (let j = 0; j < this.order; ++j) {\n        if (i === j) {\n          distMatrix[i][j] = 0\n        } else {\n          let val = this.adjacencyMatrix[i][j]\n          if (val) {\n            distMatrix[i][j] = val\n          } else {\n            distMatrix[i][j] = blankFiller\n          }\n        }\n      }\n    }\n    return distMatrix\n  }\n\n}\n\nmodule.exports = FloydWarshall\n","import FloydWarshall from 'floyd-warshall'\n\nfunction unweightedAdjacencyMatrix(nodes,edges,id,source,target){\n  if (!id) { id = (node) => node }\n  if (!source) { source = (edge) => edge.source } \n  if (!target) { target = (edge) => edge.target }\n\n  if (nodes.length < 2) { return []; }\n  var adj = [];\n  for(var i=0; i<nodes.length; i++) { adj[i] = new Array(nodes.length); }\n\n  edges.forEach((edge)=>{\n    adj[nodes.indexOf(nodes.find( (node)=>id(node)==source(edge) ))]\n        [nodes.indexOf(nodes.find( (node)=>id(node)==target(edge) ))] = 1;\n  })\n  return adj;\n}\n\nfunction makeHopD3(source, target){\n  return {source: source, target: target};\n}\n\nfunction makeHopVisJS(source, target){\n  return {from: source, to: target};\n}\n\nfunction graphHops(nodes,edges,id,makeHop){\n  // use the D3 style by default\n  if (!makeHop) { makeHop = makeHopD3 }\n  \n  var adj = unweightedAdjacencyMatrix(nodes,edges,id);\n  var hopMatrix = new FloydWarshall(adj).shortestPaths;\n  var hops = {1: edges}\n  hopMatrix.forEach((row,i)=>{\n    row.forEach((hop,j)=>{\n      if(hop > 1){\n        if(!hops[hop]){hops[hop] = []};\n        var h = makeHop(nodes[i],nodes[j]);\n        hops[hop].push(h);\n      }\n    })\n  })\n  return hops;\n}\n\nexport {unweightedAdjacencyMatrix, graphHops};\n\n"],"names":["FloydWarshall","adjacencyMatrix","blankFiller","distMatrix","i","order","j","val","_initializeDistanceMatrix","k","direct","detour","Math","min","Infinity","dist","length","unweightedAdjacencyMatrix","nodes","edges","id","source","target","node","edge","adj","Array","forEach","indexOf","find","makeHopD3","graphHops","makeHop","hopMatrix","shortestPaths","hops","row","hop","h","push"],"mappings":"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"}